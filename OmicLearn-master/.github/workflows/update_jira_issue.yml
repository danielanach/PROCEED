name: Update JIRA Issue
on:
  issues:
    types: [reopened]
jobs:
  jira:
    name: Update an Issue in Jira with the GitHub issue information
    runs-on: ubuntu-latest
    env:
      JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
      API_KEY: ${{ secrets.JIRA_API_KEY }}
      JIRA_URL: ${{ secrets.JIRA_URL }}
      JIRA_PROJECT_ID: ${{ secrets.JIRA_PROJECT_ID }}
      JIRA_REPORTER: ${{ secrets.JIRA_REPORTER }}
      JIRA_EPIC_ID: ${{ secrets.EPIC_ID }}
    steps:
      - name: Checkout Repository Code
        uses: actions/checkout@v2
      - name: Save Issue Information
        id: issue-info
        run: |
          unescaped_summary="${{ github.event.issue.title }}"
          summary=$(echo ${unescaped_summary// /%20})
          if [[ $summary == *"'"* ]]; then
            summary=$(echo "${summary//\'/''}")
          fi
          description="${{ github.event.issue.body }}"
          if [ -z "$description" ]; then
             description="No description has been provided."
          fi
          if [[ $description == *"'"* ]]; then
             description=$(echo "${description//\'/''}")
          fi
          echo "::set-output name=summary::${summary}"
          echo "::set-output name=description::${description}"
      - name: Check if the issue is already open in JIRA
        id: issue-check
        run: |
          result=$(curl --request GET \
            --url 'https://omicera.atlassian.net/rest/api/2/search?jql=summary~"${{ steps.issue-info.outputs.summary }}"&issuetypeNames=Bug&project=${{ secrets.JIRA_PROJECT_ID }}' \
            --user '${{ env.JIRA_USER_EMAIL }}:${{ env.API_KEY }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json')
          totalResults=$(echo $result | jq '.total')
          if [ "$totalResults" -eq "0" ]; then
            echo "::set-output name=issueExists::False"
          else
            echo "::set-output name=issueExists::True"
            issueID=$(echo $result | jq '.issues[0]["key"]')
            temp="${issueID%\"}"
            issueID="${temp#\"}"
            echo "::set-output name=issue::$issueID"
          fi
      - name: Grab the comment body
        if: steps.issue-check.outputs.issueExists == 'True'
        id: comment-body
        run: |
          timestamp() {
            date -u +"%Y-%m-%dT%H:%M:%SZ" -d "-1 min"
          }
          result_time=$(timestamp)
          comment=$(curl -s "https://api.github.com/repos/OmicEra/aws-terraform-modules/issues/${{ github.event.issue.number }}/comments?since=$result_time" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}")
          if [ ${#comment[@]} -eq 0 ]; then
            echo "Comment not found"
            exit 1
          fi
          echo $comment
          commentID=$(echo $comment | jq '.[0]["id"]')
          commentBody=$(echo $comment | jq '.[0]["body"]')
          temp="${commentBody%\"}"
          commentBody="${temp#\"}"
          if [[ $commentBody == *"'"* ]]; then
            commentBody=$(echo "${commentBody//\'/''}")
          fi
          echo "Comment id is ${commentID}"
          echo "Comment body is ${commentBody}"
          echo "::set-output name=body::$commentBody"
      - name: Update the existing issue in JIRA
        if: steps.issue-check.outputs.issueExists == 'True'
        run: |
          result=$(curl --request POST \
            --url 'https://omicera.atlassian.net/rest/api/2/issue/${{ steps.issue-check.outputs.issue }}/comment' \
            --user '${{ env.JIRA_USER_EMAIL }}:${{ env.API_KEY }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data '
              {
                "body": "[Automated re-opening comment]: ${{ steps.comment-body.outputs.body }}"
              }
            ')
          echo $result
          issueID=$(echo $result | jq '.id')
          if [ -z "issueID" ]; then
            echo $result
            echo "The workflow has failed."
            exit 1
          else
            echo "Issue updated successfully."
            echo "Issue ID is ${issueID}"
          fi
      - name: Create a similar Issue in JIRA
        if: steps.issue-check.outputs.issueExists == 'False'
        run: |
          result=$(curl --request POST \
            --url '${{ env.JIRA_URL }}' \
            --user '${{ env.JIRA_USER_EMAIL }}:${{ env.API_KEY }}' \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data '
              {
                "fields": {
              		"project": {
                    "key": "${{ env.JIRA_PROJECT_ID }}"
                  },
              		"issuetype": {
                    "name": "Bug"
                  },
                  "summary": "${{ steps.issue-info.outputs.summary }}",
                  "description": "[Automated opening comment]: ${{ steps.issue-info.outputs.description }}",
                  "reporter": {
                    "id": "${{ env.JIRA_REPORTER }}"
                  },
              		"priority": {
              			"name": "Medium"
              		},
                  "labels": [
                    "bugfix",
                    "github_created_issue"
                  ],
                  "customfield_10014": "${{ env.JIRA_EPIC_ID }}"
                }
              }
            ')
          issueID=$(echo $result | jq '.id')
          if [ -z "issueID" ]; then
            echo $result
            echo "The workflow has failed."
            exit 1
          else
            echo "Issue created successfully."
            echo "Issue ID is ${issueID}"
          fi

